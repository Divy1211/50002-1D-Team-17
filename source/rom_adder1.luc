/**
* ROM containing part1 of the test cases for the adder
* 
* @input test_case   - test case number
*
* @output a          - 16 bit value of a for the requested test case
* @output b          - 16 bit value of b for the requested test case
* @output alufn      -  6 bit alufn control signal for the requested test case
* @output exp_out    - 16 bit expected output for the requested test case
* @output exp_z      -  1 bit expected output for Z flags for the requested test 
* @output exp_v      -  1 bit expected output for V flags for the requested test 
* @output exp_n      -  1 bit expected output for N flags for the requested test 
* @output num_cases  - the total number of test cases provided by this ROM
*/
module rom_adder1 (
    input test_case[5],
    
    output num_cases[5],
    output a[16], 
    output b[16],
    output alufn[6],
    output exp_out[16],
    output exp_z,
    output exp_v,
    output exp_n 
  ) {

  // 14 test cases for normal addition, normal subtraction, checking for accuracy of z and n output
  //         addition                   subtraction                 z=1                                n check
  const A = {16hFFFF, 16h00FF, 16h00FF, 16hFFFF, 16h00FF, 16h00FF, 16h00FF, 16h0000, 16hFFFF, 16h00FF, 16hFFFE, 16h01FF, 16hFFFE, 16h00F0};
  
  //         addition                   subtraction                 z=1                                n check
  const B = {16hFFFF, 16h01FF, 16hFFFF, 16hFFFE, 16h01FF, 16hFFFF, 16hFF01, 16h0000, 16hFFFF, 16h00FF, 16hFFFE, 16h01FF, 16hFFFA, 16h02FF};
  
  // all the ALUFN_SIGNALs for each test case alufn0 = 0 --> add, alufn0 = 1 --> subtract
  //                    addition       subtraction    z=1                 n check
  const ALUFN_SIGNAL = {6h0, 6h0, 6h0, 6h1, 6h1, 6h1, 6h0, 6h0, 6h1, 6h1, 6h0, 6h0, 6h1, 6h1};
  
  //                           addition                   subtraction                 z=1                                n check
  const EXPECTED_OUTPUT_SUM = {16hFFFE, 16h02FE, 16h00FE, 16h0001, 16hFF00, 16h0100, 16h0000, 16h0000, 16h0000, 16h0000, 16hFFFC, 16h03FE, 16h0004, 16hFF00};
  
  //                         addition       subtraction    z=1                 n check
  const EXPECTED_OUTPUT_Z = {1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b1, 1b1, 1b1, 1b1, 1b0, 1b0, 1b0, 1b0};
  
  //                         addition       subtraction    z=1                 n check
  const EXPECTED_OUTPUT_V = {1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0, 1b0};
  
  //                         addition       subtraction    z=1                 n check
  const EXPECTED_OUTPUT_N = {1b1, 1b0, 1b0, 1b0, 1b1, 1b0, 1b0, 1b0, 1b0, 1b0, 1b1, 1b0, 1b0, 1b1};
  
  always {
    num_cases = 5d14;
    a = A[test_case];
    b = B[test_case];
    alufn = ALUFN_SIGNAL[test_case];
    exp_out = EXPECTED_OUTPUT_SUM[test_case];
    exp_z = EXPECTED_OUTPUT_Z[test_case];
    exp_v = EXPECTED_OUTPUT_V[test_case];
    exp_n = EXPECTED_OUTPUT_N[test_case];
  }
}
