/**
* Performs addition/subtraction on two 16 bit values, following the lab 3 schematic
*
* @input a     - 16 bit input from reg A
* @input b     - 16 bit input from reg B
* @input alufn -  6 bit control signal
*   00 0000: a+b,
*   00 0001: a-b,
*   00 0100: a*b,
*   00 0101: a/b,
*   00 0110: a%b,
*   01 1000: a AND b,
*   01 1110: a  OR b,
*   01 0110: a XOR b,
*   01 1010: output a,
*   01 0111: a NAND b,
*   01 0001: a NOR b,
*   01 1001: a XNOR b,
*   01 1100: return b,
*   10 0000: a  << b,  (unsiged left shift)
*   10 0001: a  >> b,  (unsiged right shift)
*   10 0011: a >>> b,  (siged/arithmetic right shift)
*   11 0011: a == b,
*   11 0101: a  < b,
*   11 0111: a <= b,
*
* @output out  - 16 bit result of the operation performed
* @output z    -  1 bit, set to true if the result is 0
* @output v    -  1 bit, set to true if there is an overflow
* @output n    -  1 bit, set to true if the result is negative
* @output e    -  1 bit, set to true if an arithmetic error occured (currently, the only error that can happen is div by 0 in multiplier)
*/
module alu (
    input a[16],
    input b[16],
    input alufn[6],
    output out[16],
    output z,
    output v,
    output n,
    output e
  ) {
  
  // instantiate all the components
  .alufn(alufn) {
    .b(b), .a(a) {
      adder adderALU; 
      boolean booleanALU;
      shifter shifterALU;
      multiplier multiplierALU;
    }
    compare compareALU;
  }
  
   
  // temp variable to choose add/multiply
  sig mul_or_add[16];
  
  always {
    e = 0;
    z = adderALU.z;
    v = adderALU.v;
    n = adderALU.n;

    compareALU.z = adderALU.z;
    compareALU.v = adderALU.v;
    compareALU.n = adderALU.n;
    
    // choose whether to add or multiply
    case(alufn[2]) {
      1b0:
        mul_or_add = adderALU.out;
      1b1:
        mul_or_add = multiplierALU.out;
        e = multiplierALU.div_by_zero;
      default:
        mul_or_add = 16h0;
    }
    
    // choose one of the functions of the ALU using the top two bits of the ALUFN
    case(alufn[5:4]) {
      2b00:
        out = mul_or_add;
      2b01:
        out = booleanALU.out;
      2b10:
        out = shifterALU.out;
      2b11:
        out = compareALU.out;
      default:
        out = 16b0;
    }
  }
}
