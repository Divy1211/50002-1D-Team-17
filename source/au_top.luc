/**
* Alchitry IO Board Interface
*/

module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    .rst(rst) {
      
      game_fsm game;

      fsm state = {START, MANUAL, AUTO};
      wave wave1;                                                               // fancy wave effect
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    game.button_0 = 0;
    game.button_1 = 0;
    game.button_2 = 0;
    game.button_3 = 0;
    game.button_4 = 0;
    game.button_5 = 0;
    game.button_6 = 0;
    game.button_7 = 0;
    game.button_8 = 0;
    game.button_9 = 0;

    game.button_a = 0;
    game.button_b = 0;
    game.button_c = 0;
    game.button_d = 0;

    game.button_asterisk = 0;
    game.button_hash = 0;

    game.rb_data = 0;

    case (state.q) {
      state.START:
        io_led[0] = wave1.out;
        io_led[1] = wave1.out;
        io_led[2] = wave1.out;
        if (io_button[3]) {                 // left io button --> manual test mode
          state.d = state.MANUAL;
        } 
        if (io_button[4]) {                 // right io button --> auto test mode
          state.d = state.AUTO;
        }
    }
  }
}