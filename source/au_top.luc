/**
* Alchitry IO Board Interface
*/

module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {START, MANUAL, AUTO};
      test_fsm tester(.error(io_dip[2][7]));
      manual_test manual(.io_shield_button(io_button), .io_shield_dip(io_dip)); // instance of the manual tester
      wave wave1;                                                               // fancy wave effect
      multi_seven_seg seven_seg_display;
    }
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    seven_seg_display.values = 4x{{5b0}};
    tester.start = 0;
    case (state.q) {
      state.START:
        io_led[0] = wave1.out;
        io_led[1] = wave1.out;
        io_led[2] = wave1.out;
        if (io_button[3]) {                 // left io button --> manual test mode
          state.d = state.MANUAL;
        } 
        if (io_button[4]) {                 // right io button --> auto test mode
          state.d = state.AUTO;
        }
 
      state.MANUAL:
        // displaying the inputs/outputs on the LED rows and the 7 seg display
        io_led[2][7] = manual.z;
        io_led[2][6] = manual.v;
        io_led[2][5] = manual.n;
        io_led[2][4] = manual.e;
        io_led[2][3:0] = manual.manual_state;
        io_led[1] = manual.out[15:8];
        io_led[0] = manual.out[7:0];
        
        seven_seg_display.values[0] = manual.out[3:0];
        seven_seg_display.values[1] = manual.out[7:4];
        seven_seg_display.values[2] = manual.out[11:8];
        seven_seg_display.values[3] = manual.out[15:12];

        io_seg = seven_seg_display.seg;
        io_sel = seven_seg_display.sel;

        if (io_button[1]) {                 // if the center io_button is pressed, return to start state.
          state.d = state.START;
        }
          
      state.AUTO:

        tester.start = 1;

        // each unit (adder, multiplier, etc.) is represented by one LED. There are 7 total units to be tested
        // the LED for a unit lights up only if all test cases of the unit pass successfully
        io_led[2][6:0] = tester.unit_passed;
        io_led[2][7] = tester.complete;
        
        // one LED represents one test case. A pass lights the LED, a fail doesn't light the LED.
        io_led[1] = tester.test_cases_passed[15:8];
        io_led[0] = tester.test_cases_passed[7:0];
        if (io_button[1]) {                 // if the center io_button is pressed, return to start state.
          state.d = state.START;
        }
    }
  }
}