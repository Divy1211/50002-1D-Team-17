/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [24-1:0] M_test_io_led;
  wire [8-1:0] M_test_io_seg;
  wire [4-1:0] M_test_io_sel;
  reg [5-1:0] M_test_io_button;
  reg [24-1:0] M_test_io_dip;
  game_fsm_test_1 test (
    .clk(clk),
    .rst(rst),
    .io_button(M_test_io_button),
    .io_dip(M_test_io_dip),
    .io_led(M_test_io_led),
    .io_seg(M_test_io_seg),
    .io_sel(M_test_io_sel)
  );
  localparam START_state = 2'd0;
  localparam MANUAL_state = 2'd1;
  localparam AUTO_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = START_state;
  wire [8-1:0] M_wave1_out;
  wave_2 wave1 (
    .clk(clk),
    .rst(rst),
    .out(M_wave1_out)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_test_io_button = 1'h0;
    M_test_io_dip = 24'h000000;
    
    case (M_state_q)
      START_state: begin
        io_led[0+7-:8] = M_wave1_out;
        io_led[8+7-:8] = M_wave1_out;
        io_led[16+7-:8] = M_wave1_out;
        if (io_button[3+0-:1]) begin
          M_state_d = MANUAL_state;
        end
      end
      MANUAL_state: begin
        M_test_io_button = io_button;
        M_test_io_dip = io_dip;
        io_led = M_test_io_led;
        io_seg = M_test_io_seg;
        io_sel = M_test_io_sel;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
