/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_10 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n,
    output reg e
  );
  
  
  
  wire [16-1:0] M_adderALU_out;
  wire [1-1:0] M_adderALU_z;
  wire [1-1:0] M_adderALU_v;
  wire [1-1:0] M_adderALU_n;
  adder_11 adderALU (
    .alufn(alufn),
    .b(b),
    .a(a),
    .out(M_adderALU_out),
    .z(M_adderALU_z),
    .v(M_adderALU_v),
    .n(M_adderALU_n)
  );
  wire [16-1:0] M_booleanALU_out;
  boolean_12 booleanALU (
    .alufn(alufn),
    .b(b),
    .a(a),
    .out(M_booleanALU_out)
  );
  wire [16-1:0] M_shifterALU_out;
  shifter_13 shifterALU (
    .alufn(alufn),
    .b(b),
    .a(a),
    .out(M_shifterALU_out)
  );
  wire [16-1:0] M_multiplierALU_out;
  wire [1-1:0] M_multiplierALU_div_by_zero;
  multiplier_14 multiplierALU (
    .alufn(alufn),
    .b(b),
    .a(a),
    .out(M_multiplierALU_out),
    .div_by_zero(M_multiplierALU_div_by_zero)
  );
  wire [16-1:0] M_compareALU_out;
  reg [1-1:0] M_compareALU_z;
  reg [1-1:0] M_compareALU_v;
  reg [1-1:0] M_compareALU_n;
  compare_15 compareALU (
    .alufn(alufn),
    .z(M_compareALU_z),
    .v(M_compareALU_v),
    .n(M_compareALU_n),
    .out(M_compareALU_out)
  );
  
  reg [15:0] mul_or_add;
  
  always @* begin
    e = 1'h0;
    z = M_adderALU_z;
    v = M_adderALU_v;
    n = M_adderALU_n;
    M_compareALU_z = M_adderALU_z;
    M_compareALU_v = M_adderALU_v;
    M_compareALU_n = M_adderALU_n;
    
    case (alufn[2+0-:1])
      1'h0: begin
        mul_or_add = M_adderALU_out;
      end
      1'h1: begin
        mul_or_add = M_multiplierALU_out;
      end
      default: begin
        mul_or_add = 16'h0000;
      end
    endcase
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = mul_or_add;
      end
      2'h1: begin
        out = M_booleanALU_out;
      end
      2'h2: begin
        out = M_shifterALU_out;
      end
      2'h3: begin
        out = M_compareALU_out;
      end
      default: begin
        out = 16'h0000;
      end
    endcase
  end
endmodule
