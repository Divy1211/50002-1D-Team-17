/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_fsm_test_1 (
    input clk,
    input rst,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  wire [1-1:0] M_game_we;
  wire [5-1:0] M_game_ra;
  wire [5-1:0] M_game_rb;
  wire [5-1:0] M_game_rc;
  wire [16-1:0] M_game_literal;
  wire [1-1:0] M_game_asel;
  wire [1-1:0] M_game_bsel;
  wire [1-1:0] M_game_wdsel;
  wire [1-1:0] M_game_ra2sel;
  wire [6-1:0] M_game_alufn;
  wire [1-1:0] M_game_start;
  wire [1-1:0] M_game_finished;
  wire [8-1:0] M_game_state;
  reg [1-1:0] M_game_button_0;
  reg [1-1:0] M_game_button_1;
  reg [1-1:0] M_game_button_2;
  reg [1-1:0] M_game_button_3;
  reg [1-1:0] M_game_button_4;
  reg [1-1:0] M_game_button_5;
  reg [1-1:0] M_game_button_6;
  reg [1-1:0] M_game_button_7;
  reg [1-1:0] M_game_button_8;
  reg [1-1:0] M_game_button_9;
  reg [1-1:0] M_game_button_a;
  reg [1-1:0] M_game_button_b;
  reg [1-1:0] M_game_button_c;
  reg [1-1:0] M_game_button_d;
  reg [1-1:0] M_game_button_asterisk;
  reg [1-1:0] M_game_button_hash;
  reg [16-1:0] M_game_rb_data;
  game_fsm_4 game (
    .clk(clk),
    .rst(rst),
    .button_0(M_game_button_0),
    .button_1(M_game_button_1),
    .button_2(M_game_button_2),
    .button_3(M_game_button_3),
    .button_4(M_game_button_4),
    .button_5(M_game_button_5),
    .button_6(M_game_button_6),
    .button_7(M_game_button_7),
    .button_8(M_game_button_8),
    .button_9(M_game_button_9),
    .button_a(M_game_button_a),
    .button_b(M_game_button_b),
    .button_c(M_game_button_c),
    .button_d(M_game_button_d),
    .button_asterisk(M_game_button_asterisk),
    .button_hash(M_game_button_hash),
    .rb_data(M_game_rb_data),
    .we(M_game_we),
    .ra(M_game_ra),
    .rb(M_game_rb),
    .rc(M_game_rc),
    .literal(M_game_literal),
    .asel(M_game_asel),
    .bsel(M_game_bsel),
    .wdsel(M_game_wdsel),
    .ra2sel(M_game_ra2sel),
    .alufn(M_game_alufn),
    .start(M_game_start),
    .finished(M_game_finished),
    .state(M_game_state)
  );
  wire [16-1:0] M_regf_ra_data;
  wire [16-1:0] M_regf_rb_data;
  wire [144-1:0] M_regf_board_state;
  wire [16-1:0] M_regf_pieces_remaining_p1;
  wire [16-1:0] M_regf_pieces_remaining_p2;
  wire [16-1:0] M_regf_winner;
  reg [5-1:0] M_regf_ra;
  reg [5-1:0] M_regf_rb;
  reg [5-1:0] M_regf_rc;
  reg [1-1:0] M_regf_ra2sel;
  reg [1-1:0] M_regf_we;
  reg [16-1:0] M_regf_data;
  regfile_5 regf (
    .clk(clk),
    .rst(rst),
    .ra(M_regf_ra),
    .rb(M_regf_rb),
    .rc(M_regf_rc),
    .ra2sel(M_regf_ra2sel),
    .we(M_regf_we),
    .data(M_regf_data),
    .ra_data(M_regf_ra_data),
    .rb_data(M_regf_rb_data),
    .board_state(M_regf_board_state),
    .pieces_remaining_p1(M_regf_pieces_remaining_p1),
    .pieces_remaining_p2(M_regf_pieces_remaining_p2),
    .winner(M_regf_winner)
  );
  wire [8-1:0] M_seven_seg_display_seg;
  wire [4-1:0] M_seven_seg_display_sel;
  reg [20-1:0] M_seven_seg_display_values;
  multi_seven_seg_6 seven_seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seven_seg_display_values),
    .seg(M_seven_seg_display_seg),
    .sel(M_seven_seg_display_sel)
  );
  
  reg [15:0] temp1;
  
  always @* begin
    M_game_button_0 = 1'h0;
    M_game_button_1 = 1'h0;
    M_game_button_2 = 1'h0;
    M_game_button_3 = 1'h0;
    M_game_button_4 = 1'h0;
    M_game_button_5 = 1'h0;
    M_game_button_6 = 1'h0;
    M_game_button_7 = 1'h0;
    M_game_button_8 = 1'h0;
    M_game_button_9 = 1'h0;
    M_game_button_a = 1'h0;
    M_game_button_b = 1'h0;
    M_game_button_c = 1'h0;
    M_game_button_d = 1'h0;
    M_game_button_asterisk = 1'h0;
    M_game_button_hash = 1'h0;
    M_game_rb_data = 1'h0;
    M_regf_ra = M_game_ra;
    M_regf_rb = M_game_rb;
    M_regf_rc = M_game_rc;
    M_regf_ra2sel = M_game_ra2sel;
    M_regf_we = M_game_we;
    M_regf_data = M_game_literal;
    M_game_rb_data = M_regf_rb_data;
    if (io_button[0+0-:1]) begin
      
      case (io_dip[8+0+3-:4])
        1'h0: begin
          M_game_button_0 = 1'h1;
        end
        1'h1: begin
          M_game_button_1 = 1'h1;
        end
        2'h2: begin
          M_game_button_2 = 1'h1;
        end
        2'h3: begin
          M_game_button_3 = 1'h1;
        end
        3'h4: begin
          M_game_button_4 = 1'h1;
        end
        3'h5: begin
          M_game_button_5 = 1'h1;
        end
        3'h6: begin
          M_game_button_6 = 1'h1;
        end
        3'h7: begin
          M_game_button_7 = 1'h1;
        end
        4'h8: begin
          M_game_button_8 = 1'h1;
        end
        4'h9: begin
          M_game_button_9 = 1'h1;
        end
        4'ha: begin
          M_game_button_a = 1'h1;
        end
        4'hb: begin
          M_game_button_b = 1'h1;
        end
        4'hc: begin
          M_game_button_c = 1'h1;
        end
        4'hd: begin
          M_game_button_d = 1'h1;
        end
        4'he: begin
          M_game_button_asterisk = 1'h1;
        end
        4'hf: begin
          M_game_button_hash = 1'h1;
        end
      endcase
    end
    M_seven_seg_display_values[0+4-:5] = 5'h16;
    M_seven_seg_display_values[5+4-:5] = 5'h16;
    M_seven_seg_display_values[10+4-:5] = 5'h16;
    M_seven_seg_display_values[15+4-:5] = 5'h16;
    
    case (io_dip[16+0+3-:4])
      1'h1: begin
        temp1 = M_regf_board_state[0+0+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      2'h2: begin
        temp1 = M_regf_board_state[0+16+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      2'h3: begin
        temp1 = M_regf_board_state[0+32+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      3'h4: begin
        temp1 = M_regf_board_state[48+0+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      3'h5: begin
        temp1 = M_regf_board_state[48+16+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      3'h6: begin
        temp1 = M_regf_board_state[48+32+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      3'h7: begin
        temp1 = M_regf_board_state[96+0+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      4'h8: begin
        temp1 = M_regf_board_state[96+16+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
      4'h9: begin
        temp1 = M_regf_board_state[96+32+15-:16];
        M_seven_seg_display_values[0+4-:5] = temp1[0+3-:4];
        M_seven_seg_display_values[5+4-:5] = temp1[4+3-:4];
        M_seven_seg_display_values[10+4-:5] = temp1[8+3-:4];
        M_seven_seg_display_values[15+4-:5] = temp1[12+3-:4];
      end
    endcase
    io_seg = M_seven_seg_display_seg;
    io_sel = M_seven_seg_display_sel;
    io_led = {8'h00, 8'h00, M_game_state};
  end
endmodule
