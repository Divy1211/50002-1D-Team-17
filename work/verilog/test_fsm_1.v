/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_fsm_1 (
    input clk,
    input rst,
    input error,
    output reg [6:0] unit_passed,
    output reg [15:0] test_cases_passed,
    output reg complete
  );
  
  
  
  localparam ADDER1_test_unit = 3'd0;
  localparam ADDER2_test_unit = 3'd1;
  localparam BOOLEAN_test_unit = 3'd2;
  localparam COMPARE_test_unit = 3'd3;
  localparam MULTIPLIER1_test_unit = 3'd4;
  localparam MULTIPLIER2_test_unit = 3'd5;
  localparam SHIFTER_test_unit = 3'd6;
  localparam DONE_test_unit = 3'd7;
  
  reg [2:0] M_test_unit_d, M_test_unit_q = ADDER1_test_unit;
  reg [30:0] M_counter_d, M_counter_q = 1'h0;
  reg [6:0] M_unit_passed_s_d, M_unit_passed_s_q = 1'h0;
  reg [15:0] M_test_cases_passed_s_d, M_test_cases_passed_s_q = 1'h0;
  
  wire [5-1:0] M_rom1_num_cases;
  wire [16-1:0] M_rom1_a;
  wire [16-1:0] M_rom1_b;
  wire [6-1:0] M_rom1_alufn;
  wire [16-1:0] M_rom1_exp_out;
  wire [1-1:0] M_rom1_exp_z;
  wire [1-1:0] M_rom1_exp_v;
  wire [1-1:0] M_rom1_exp_n;
  rom_adder1_3 rom1 (
    .test_case(M_counter_q[26+4-:5]),
    .num_cases(M_rom1_num_cases),
    .a(M_rom1_a),
    .b(M_rom1_b),
    .alufn(M_rom1_alufn),
    .exp_out(M_rom1_exp_out),
    .exp_z(M_rom1_exp_z),
    .exp_v(M_rom1_exp_v),
    .exp_n(M_rom1_exp_n)
  );
  wire [5-1:0] M_rom2_num_cases;
  wire [16-1:0] M_rom2_a;
  wire [16-1:0] M_rom2_b;
  wire [6-1:0] M_rom2_alufn;
  wire [16-1:0] M_rom2_exp_out;
  wire [1-1:0] M_rom2_exp_z;
  wire [1-1:0] M_rom2_exp_v;
  wire [1-1:0] M_rom2_exp_n;
  rom_adder2_4 rom2 (
    .test_case(M_counter_q[26+4-:5]),
    .num_cases(M_rom2_num_cases),
    .a(M_rom2_a),
    .b(M_rom2_b),
    .alufn(M_rom2_alufn),
    .exp_out(M_rom2_exp_out),
    .exp_z(M_rom2_exp_z),
    .exp_v(M_rom2_exp_v),
    .exp_n(M_rom2_exp_n)
  );
  wire [16-1:0] M_rom3_a;
  wire [16-1:0] M_rom3_b;
  wire [6-1:0] M_rom3_alufn;
  wire [16-1:0] M_rom3_exp_out;
  wire [1-1:0] M_rom3_exp_z;
  wire [1-1:0] M_rom3_exp_v;
  wire [1-1:0] M_rom3_exp_n;
  wire [5-1:0] M_rom3_num_cases;
  rom_boolean_5 rom3 (
    .test_case(M_counter_q[26+4-:5]),
    .a(M_rom3_a),
    .b(M_rom3_b),
    .alufn(M_rom3_alufn),
    .exp_out(M_rom3_exp_out),
    .exp_z(M_rom3_exp_z),
    .exp_v(M_rom3_exp_v),
    .exp_n(M_rom3_exp_n),
    .num_cases(M_rom3_num_cases)
  );
  wire [16-1:0] M_rom4_a;
  wire [16-1:0] M_rom4_b;
  wire [6-1:0] M_rom4_alufn;
  wire [16-1:0] M_rom4_exp_out;
  wire [1-1:0] M_rom4_exp_z;
  wire [1-1:0] M_rom4_exp_v;
  wire [1-1:0] M_rom4_exp_n;
  wire [5-1:0] M_rom4_num_cases;
  rom_comparator_6 rom4 (
    .test_case(M_counter_q[26+4-:5]),
    .a(M_rom4_a),
    .b(M_rom4_b),
    .alufn(M_rom4_alufn),
    .exp_out(M_rom4_exp_out),
    .exp_z(M_rom4_exp_z),
    .exp_v(M_rom4_exp_v),
    .exp_n(M_rom4_exp_n),
    .num_cases(M_rom4_num_cases)
  );
  wire [16-1:0] M_rom5_a;
  wire [16-1:0] M_rom5_b;
  wire [6-1:0] M_rom5_alufn;
  wire [16-1:0] M_rom5_exp_out;
  wire [1-1:0] M_rom5_exp_z;
  wire [1-1:0] M_rom5_exp_v;
  wire [1-1:0] M_rom5_exp_n;
  wire [1-1:0] M_rom5_exp_e;
  wire [5-1:0] M_rom5_num_cases;
  rom_multiplier1_7 rom5 (
    .test_case(M_counter_q[26+4-:5]),
    .a(M_rom5_a),
    .b(M_rom5_b),
    .alufn(M_rom5_alufn),
    .exp_out(M_rom5_exp_out),
    .exp_z(M_rom5_exp_z),
    .exp_v(M_rom5_exp_v),
    .exp_n(M_rom5_exp_n),
    .exp_e(M_rom5_exp_e),
    .num_cases(M_rom5_num_cases)
  );
  wire [16-1:0] M_rom6_a;
  wire [16-1:0] M_rom6_b;
  wire [6-1:0] M_rom6_alufn;
  wire [16-1:0] M_rom6_exp_out;
  wire [1-1:0] M_rom6_exp_z;
  wire [1-1:0] M_rom6_exp_v;
  wire [1-1:0] M_rom6_exp_n;
  wire [1-1:0] M_rom6_exp_e;
  wire [5-1:0] M_rom6_num_cases;
  rom_multiplier2_8 rom6 (
    .test_case(M_counter_q[26+4-:5]),
    .a(M_rom6_a),
    .b(M_rom6_b),
    .alufn(M_rom6_alufn),
    .exp_out(M_rom6_exp_out),
    .exp_z(M_rom6_exp_z),
    .exp_v(M_rom6_exp_v),
    .exp_n(M_rom6_exp_n),
    .exp_e(M_rom6_exp_e),
    .num_cases(M_rom6_num_cases)
  );
  wire [16-1:0] M_rom7_a;
  wire [16-1:0] M_rom7_b;
  wire [6-1:0] M_rom7_alufn;
  wire [16-1:0] M_rom7_exp_out;
  wire [1-1:0] M_rom7_exp_z;
  wire [1-1:0] M_rom7_exp_v;
  wire [1-1:0] M_rom7_exp_n;
  wire [5-1:0] M_rom7_num_cases;
  rom_shifter_9 rom7 (
    .test_case(M_counter_q[26+4-:5]),
    .a(M_rom7_a),
    .b(M_rom7_b),
    .alufn(M_rom7_alufn),
    .exp_out(M_rom7_exp_out),
    .exp_z(M_rom7_exp_z),
    .exp_v(M_rom7_exp_v),
    .exp_n(M_rom7_exp_n),
    .num_cases(M_rom7_num_cases)
  );
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg [15:0] exp_out;
  
  reg exp_z;
  
  reg exp_v;
  
  reg exp_n;
  
  reg exp_e;
  
  reg [15:0] alu_out;
  
  wire [16-1:0] M_test_alu_out;
  wire [1-1:0] M_test_alu_z;
  wire [1-1:0] M_test_alu_v;
  wire [1-1:0] M_test_alu_n;
  wire [1-1:0] M_test_alu_e;
  alu_10 test_alu (
    .a(a),
    .b(b),
    .alufn(alufn),
    .out(M_test_alu_out),
    .z(M_test_alu_z),
    .v(M_test_alu_v),
    .n(M_test_alu_n),
    .e(M_test_alu_e)
  );
  
  always @* begin
    M_test_unit_d = M_test_unit_q;
    M_test_cases_passed_s_d = M_test_cases_passed_s_q;
    M_counter_d = M_counter_q;
    M_unit_passed_s_d = M_unit_passed_s_q;
    
    M_counter_d = M_counter_q + 1'h1;
    complete = 1'h0;
    alufn = 1'h0;
    exp_out = 1'h0;
    exp_z = 1'h0;
    exp_v = 1'h0;
    exp_n = 1'h0;
    exp_e = 1'h0;
    
    case (M_test_unit_q)
      ADDER1_test_unit: begin
        a = M_rom1_a;
        b = M_rom1_b;
        alufn = M_rom1_alufn;
        exp_out = M_rom1_exp_out;
        exp_z = M_rom1_exp_z;
        exp_v = M_rom1_exp_v;
        exp_n = M_rom1_exp_n;
        M_unit_passed_s_d[0+0-:1] = 1'h0;
        if (M_counter_q[26+4-:5] == M_rom1_num_cases) begin
          M_unit_passed_s_d[0+0-:1] = (&(M_test_cases_passed_s_q[0+13-:14]));
          M_counter_d = 1'h0;
          M_test_unit_d = ADDER2_test_unit;
        end
      end
      ADDER2_test_unit: begin
        a = M_rom2_a;
        b = M_rom2_b;
        alufn = M_rom2_alufn;
        exp_out = M_rom2_exp_out;
        exp_z = M_rom2_exp_z;
        exp_v = M_rom2_exp_v;
        exp_n = M_rom2_exp_n;
        M_unit_passed_s_d[1+0-:1] = 1'h0;
        if (M_counter_q[26+4-:5] == M_rom2_num_cases) begin
          M_unit_passed_s_d[1+0-:1] = (&M_test_cases_passed_s_q[0+13-:14]);
          M_counter_d = 1'h0;
          M_test_unit_d = BOOLEAN_test_unit;
        end
      end
      BOOLEAN_test_unit: begin
        a = M_rom3_a;
        b = M_rom3_b;
        alufn = M_rom3_alufn;
        exp_out = M_rom3_exp_out;
        exp_z = M_rom3_exp_z;
        exp_v = M_rom3_exp_v;
        exp_n = M_rom3_exp_n;
        M_unit_passed_s_d[2+0-:1] = 1'h0;
        if (M_counter_q[26+4-:5] == M_rom3_num_cases) begin
          M_unit_passed_s_d[2+0-:1] = (&M_test_cases_passed_s_q[0+13-:14]);
          M_counter_d = 1'h0;
          M_test_unit_d = COMPARE_test_unit;
        end
      end
      COMPARE_test_unit: begin
        a = M_rom4_a;
        b = M_rom4_b;
        alufn = M_rom4_alufn;
        exp_out = M_rom4_exp_out;
        exp_z = M_rom4_exp_z;
        exp_v = M_rom4_exp_v;
        exp_n = M_rom4_exp_n;
        M_unit_passed_s_d[3+0-:1] = 1'h0;
        if (M_counter_q[26+4-:5] == M_rom4_num_cases) begin
          M_unit_passed_s_d[3+0-:1] = (&M_test_cases_passed_s_q[0+13-:14]);
          M_counter_d = 1'h0;
          M_test_unit_d = MULTIPLIER1_test_unit;
        end
      end
      MULTIPLIER1_test_unit: begin
        a = M_rom5_a;
        b = M_rom5_b;
        alufn = M_rom5_alufn;
        exp_out = M_rom5_exp_out;
        exp_z = M_rom5_exp_z;
        exp_v = M_rom5_exp_v;
        exp_n = M_rom5_exp_n;
        M_unit_passed_s_d[4+0-:1] = 1'h0;
        if (M_counter_q[26+4-:5] == M_rom5_num_cases) begin
          M_unit_passed_s_d[4+0-:1] = (&M_test_cases_passed_s_q[0+13-:14]);
          M_counter_d = 1'h0;
          M_test_unit_d = MULTIPLIER2_test_unit;
        end
      end
      MULTIPLIER2_test_unit: begin
        a = M_rom6_a;
        b = M_rom6_b;
        alufn = M_rom6_alufn;
        exp_out = M_rom6_exp_out;
        exp_z = M_rom6_exp_z;
        exp_v = M_rom6_exp_v;
        exp_n = M_rom6_exp_n;
        M_unit_passed_s_d[5+0-:1] = 1'h0;
        if (M_counter_q[26+4-:5] == M_rom6_num_cases) begin
          M_unit_passed_s_d[5+0-:1] = (&M_test_cases_passed_s_q[0+13-:14]);
          M_counter_d = 1'h0;
          M_test_unit_d = SHIFTER_test_unit;
        end
      end
      SHIFTER_test_unit: begin
        a = M_rom7_a;
        b = M_rom7_b;
        alufn = M_rom7_alufn;
        exp_out = M_rom7_exp_out;
        exp_z = M_rom7_exp_z;
        exp_v = M_rom7_exp_v;
        exp_n = M_rom7_exp_n;
        M_unit_passed_s_d[6+0-:1] = 1'h0;
        if (M_counter_q[26+4-:5] == M_rom7_num_cases) begin
          M_unit_passed_s_d[6+0-:1] = (&M_test_cases_passed_s_q[0+13-:14]);
          M_counter_d = 1'h0;
          M_test_unit_d = DONE_test_unit;
        end
      end
      DONE_test_unit: begin
        M_counter_d = 1'h0;
        complete = 1'h1;
      end
    endcase
    alu_out = M_test_alu_out;
    if (error == 1'h1) begin
      alu_out = ~alu_out;
    end
    M_test_cases_passed_s_d[(M_counter_q[26+4-:5])*1+0-:1] = ~(|(alu_out ^ exp_out) & ~(|({M_test_alu_z, M_test_alu_v, M_test_alu_n, M_test_alu_e} ^ {exp_z, exp_v, exp_n, exp_e})));
    test_cases_passed = M_test_cases_passed_s_q;
    unit_passed = M_unit_passed_s_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_unit_passed_s_q <= 1'h0;
      M_test_cases_passed_s_q <= 1'h0;
      M_test_unit_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_unit_passed_s_q <= M_unit_passed_s_d;
      M_test_cases_passed_s_q <= M_test_cases_passed_s_d;
      M_test_unit_q <= M_test_unit_d;
    end
  end
  
endmodule
